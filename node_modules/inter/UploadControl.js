var async = require('async');
var fs = require('fs');
var gm = require('gm');

var config = require('config');
var ec = config.ec;
var prop = config.prop;

var cons = require('cons');
var keyFromType = cons.keyFromType;
var customerType = cons.customerType;
var fileType = cons.fileType;

var esut = require('easy_util');
var digestUtil = esut.digestUtil;
var log = esut.log;
var dateUtil = esut.dateUtil;

var dc = require('db').dc;

var MgFileStream = require('mystream').MgFileStream;

var Control = function () {
    var self = this;
    var cmdArray = [
        {code: 'UP01', fromType: keyFromType.CACHE, des: "上传文件请求"},
        {code: 'UP02', fromType: keyFromType.CACHE, des: "上传文件块"},
        {code: 'UP03', fromType: keyFromType.CACHE, des: "生成头像"}
    ];
    self.cmd = {};
    for(var i = 0; i < cmdArray.length; i++)
    {
        var set = cmdArray[i];
        self.cmd[set.code] = set;
    }
};

Control.prototype.checkUP01 = function (headNode, bodyNode, cb) {
    cb(null);
};

Control.prototype.checkUP02 = function (headNode, bodyNode, cb) {
    cb(null);
};

Control.prototype.checkUP03 = function (headNode, bodyNode, cb) {
    cb(null);
};

/**
 * 用户发起上传文件请求
 * @param headNode
 * @param bodyNode
 * @param cb
 */
Control.prototype.handleUP01 = function (headNode, bodyNode, cb) {
    var backBody = {};
    var table = dc.pg.get("customer_file");
    var id = digestUtil.createUUID();
    var curFileType = fileType.mime[bodyNode.type];
    if(curFileType == undefined)
    {
        curFileType = fileType['UNKOWN'];
    }
    var curFile = {
        name:bodyNode.name,
        type:curFileType.id,
        size:bodyNode.size,
        create_time:dateUtil.getCurTime(),
        customer_id:parseInt(headNode.userId)
    };
    var options = {ret:{id:1}};
    table.save(curFile, options, function(err, data){
        if(err)
        {
            cb(ec[9999]);
        }
        else
        {
            backBody.fileId = data.rst[0].id;
            cb(null, backBody);
        }
    });
};

/**
 * 上传文件块
 * @param headNode
 * @param bodyNode
 * @param cb
 */
Control.prototype.handleUP02 = function (headNode, bodyNode, cb) {
    var backBody = {};
    var fileBlock = {
        start:bodyNode.start,
        size:bodyNode.size,
        create_time:dateUtil.getCurTime(),
        customer_id:parseInt(headNode.userId),
        file_id:bodyNode.fileId,
        content:bodyNode.content
    }
    var table = dc.pg.get("file_block");
    table.save(fileBlock, function(err, data){
        if(err)
        {
            console.log(err);
            cb(ec[9999]);
        }
        else
        {
            cb(null, backBody);
        }
    });
};

/**
 * 用户生成头像
 * @param headNode
 * @param bodyNode
 * @param cb
 */
Control.prototype.handleUP03 = function (headNode, bodyNode, cb) {
    var backBodyNode = {};
    var newPicName = null;
    var newPicPath = null;
    var avatarName = null;
    var avatarPath = null;
    var fromFile = null;
    var userId = parseInt(headNode.userId);
    async.waterfall([
        function(cb)    //获得文件信息
        {
            var cond = {id: bodyNode.picId};
            var table = dc.pg.get("customer_file");
            table.find(cond, {}, function (err, data) {
                if (data && data.affected > 0) {
                    var set = data.rst[0];
                    cb(null, set);
                }
                else
                {
                    cb(err);
                }
            });
        },
        function(file, cb)  //根据文件类型生成文件名称
        {
            fromFile = file;
            var sfx = '';
            if(file.type == fileType['JPEG'].id)
            {
                sfx = '.jpeg';
            }
            else if(file.type == fileType['PNG'].id)
            {
                sfx = '.png';
            }
            newPicName = digestUtil.createUUID() + sfx;
            newPicPath = "/data/tmp/" + newPicName;

            avatarName = digestUtil.createUUID() + sfx;
            avatarPath = "/data/tmp/" + avatarName;
            cb(null, file);
        },
        function(file, cb)    //输出文件
        {
            var wSteam = fs.createWriteStream(newPicPath);
            var table = dc.pg.get("file_block");
            var start = 0;
            var hasNext = true;
            async.whilst(
                //条件
                function() {
                    return hasNext;   //true，则第二个函数会继续执行，否则，调出循环
                },
                function(whileCb) { //循环的主体
                    var cond = {start:start, file_id:bodyNode.picId};
                    table.find(cond, {}, function(err, data){
                        if(data && data.affected > 0)
                        {
                            var set = data.rst[0];
                            var content = set.content;
                            var buf = new Buffer(content, "base64");
                            start = start + set.size;
                            wSteam.write(buf);
                        }
                        else
                        {
                            hasNext = false;
                        }
                        whileCb(err);
                    });
                },
                function(err) {         //here 如果条件不满足，或者发生异常
                    wSteam.end();
                    if(err)
                    {
                        console.log(err);
                    }
                    else
                    {
                        console.log(newPicPath + ",写入文件完成.");
                    }
                    cb(err);
                }
            );
        },
        function(cb)    //生成头像图片
        {
            console.log(avatarPath);
            /*gm(newPicPath).options({imageMagick: true})
                .resize(bodyNode.picWidth)
                .crop(100, 100, bodyNode.picX, bodyNode.picY)
                .write(avatarPath, function (err) {
                    if(err)
                    {
                        console.log(err);
                    }
                    cb(err);
                });*/
            gm(newPicPath).options({imageMagick: true})
                .resize(bodyNode.picWidth)
                .crop(100, 100, bodyNode.picX, bodyNode.picY)
                .toBuffer(function(err, buf){
                    //console.log(buf.toString('base64'));
                    cb(err, buf);
                });
        },
        function(buf, cb)   //保存文件信息到数据库
        {
            var file = {
                name:avatarName,
                type:fromFile.type,
                size:buf.length,
                customer_id:userId,
                create_time:dateUtil.getCurTime()
            }
            var options = {
                ret:{id:1}
            }
            var table = dc.pg.get("customer_file");
            table.save(file, options, function(err, data){
                console.log(data);
                if(err)
                {
                    console.log(err);
                    cb(ec[9999]);
                }
                else
                {
                    file.id = data.rst[0].id;
                    cb(null, file, buf);
                }
            });
        },
        function(file, buf, cb)   //保存文件数据到数据库
        {
            var fileBlock = {
                start:0,
                size:file.size,
                create_time:dateUtil.getCurTime(),
                customer_id:userId,
                file_id:file.id,
                content:buf.toString("base64")
            }
            var table = dc.pg.get("file_block");
            table.save(fileBlock, function(err, data){
                if(err)
                {
                    console.log(err);
                    cb(ec[9999]);
                }
                else
                {
                    cb(null, file);
                }
            });
        },
        function(file, cb)  //更新用户头像
        {
            var cond = {id:userId};
            var doc = {
                $set:{
                    avatar_id:file.id
                }
            }
            var table = dc.pg.get("customer");
            table.update(cond, doc, function(err, data){
                cb(err);
            });
        }
    ], function (err, rst) {
        cb(err, backBodyNode);
    });
};

module.exports = new Control();