var async = require('async');

var config = require('config');
var ec = config.ec;
var prop = config.prop;

var cons = require('cons');
var keyFromType = cons.keyFromType;
var customerType = cons.customerType;

var esut = require('easy_util');
var digestUtil = esut.digestUtil;
var log = esut.log;
var dateUtil = esut.dateUtil;

var dc = require('db').dc;

var Control = function () {
    var self = this;
    var cmdArray = [
        {code: 'BK01', fromType: keyFromType.CACHE, des: "添加书籍"},
        {code: 'BK02', fromType: keyFromType.CACHE, des: "删除书籍"},
        {code: 'BK03', fromType: keyFromType.CACHE, des: "添加章节"},
        {code: 'BK04', fromType: keyFromType.CACHE, des: "删除章节"},
        {code: 'BK05', fromType: keyFromType.CACHE, des: "添加小节"},
        {code: 'BK06', fromType: keyFromType.CACHE, des: "删除小节"},
        {code: 'BK07', fromType: keyFromType.CACHE, des: "修改小节内容"}
    ];
    self.cmd = {};
    for(var i = 0; i < cmdArray.length; i++)
    {
        var set = cmdArray[i];
        self.cmd[set.code] = set;
    }
};

Control.prototype.checkBK01 = function (headNode, bodyNode, cb) {
    cb(null);
};

Control.prototype.checkBK02 = function (headNode, bodyNode, cb) {
    cb(null);
};

Control.prototype.checkBK03 = function (headNode, bodyNode, cb) {
    cb(null);
};

Control.prototype.checkBK04 = function (headNode, bodyNode, cb) {
    cb(null);
};

Control.prototype.checkBK05 = function (headNode, bodyNode, cb) {
    cb(null);
};

Control.prototype.checkBK06 = function (headNode, bodyNode, cb) {
    cb(null);
};

Control.prototype.checkBK07 = function (headNode, bodyNode, cb) {
    cb(null);
};

/**
 * 添加书籍
 * @param headNode
 * @param bodyNode
 * @param cb
 */
Control.prototype.handleBK01 = function (headNode, bodyNode, cb) {
    var self = this;
    var backBodyNode = {};
    var book = {
        name:bodyNode.name,
        book_type_id:bodyNode.book_type_id,
        remark:bodyNode.remark,
        customer_id:parseInt(headNode.userId),
        create_time:dateUtil.getCurTime()
    };
    async.waterfall([
        function(cb){   //保存到数据库
            var table = dc.pg.get("book");
            table.save(book, function(err, data){
                cb(err);
            });
        }
    ], function (err, result) {
        cb(err, backBodyNode);
    });
};

/**
 * 删除书籍
 * @param headNode
 * @param bodyNode
 * @param cb
 */
Control.prototype.handleBK02 = function (headNode, bodyNode, cb) {
    var self = this;
    var backBodyNode = {};
    var cond = {
        id:bodyNode.id
    };
    async.waterfall([
        function(cb){   //保存到数据库
            var table = dc.pg.get("book");
            table.remove(cond, function(err, data){
                cb(err);
            })
        }
    ], function (err, result) {
        cb(err, backBodyNode);
    });
};

/**
 * 添加章节
 * @param headNode
 * @param bodyNode
 * @param cb
 */
Control.prototype.handleBK03 = function (headNode, bodyNode, cb) {
    var self = this;
    var backBodyNode = {};
    var chapter = {
        name:bodyNode.name,
        book_id:bodyNode.book_id,
        customer_id:parseInt(headNode.userId),
        create_time:dateUtil.getCurTime()
    };
    async.waterfall([
        function(cb)    //获得要插入数据的序号
        {
            var sql = "select max(seq) from chapter where book_id='" + bodyNode.book_id + "'";
            dc.pg.execute(sql, function(err, data){
                if(data)
                {
                    chapter.seq = data.rst[0].max + 1;
                }
                cb(err);
            });
        },
        function(cb){   //保存到数据库
            var table = dc.pg.get("chapter");
            table.save(chapter, function(err, data){
                cb(err);
            });
        }
    ], function (err, result) {
        cb(err, backBodyNode);
    });
};

/**
 * 删除书籍章节
 * @param headNode
 * @param bodyNode
 * @param cb
 */
Control.prototype.handleBK04 = function (headNode, bodyNode, cb) {
    var self = this;
    var backBodyNode = {};
    var cond = {
        id:bodyNode.id
    };
    async.waterfall([
        function(cb){   //删除章节，并返回seq的值
            var table = dc.pg.get("chapter");
            table.remove(cond, {ret:{seq:1, book_id:1}}, function(err, data){
                cb(err, data.rst[0]);
            })
        },
        function(set, cb)    //后序章节前移
        {
            var table = dc.pg.get("chapter");
            var cond = {
                book_id:set.book_id,
                seq:{
                    $gt:set.seq
                }
            };
            var doc = {
                $inc:{
                    seq:-1
                }
            }
            table.update(cond, doc, function(err, data){
                cb(null);
            });
        }
    ], function (err, result) {
        cb(err, backBodyNode);
    });
};

/**
 * 添加小节
 * @param headNode
 * @param bodyNode
 * @param cb
 */
Control.prototype.handleBK05 = function (headNode, bodyNode, cb) {
    var self = this;
    var backBodyNode = {};
    var initStr = '<div id="' + digestUtil.createUUID() + '">这是一个空的小节</div>';
    var content = new Buffer(initStr).toString('base64');
    var chapter = {
        name:bodyNode.name,
        chapter_id:bodyNode.chapter_id,
        book_id:bodyNode.book_id,
        content:content,
        customer_id:parseInt(headNode.userId),
        create_time:dateUtil.getCurTime()
    };
    async.waterfall([
        function(cb)    //获得要插入数据的序号
        {
            var sql = "select max(seq) from chapter_block where chapter_id='" + bodyNode.chapter_id + "'";
            dc.pg.execute(sql, function(err, data){
                if(data)
                {
                    chapter.seq = data.rst[0].max + 1;
                }
                cb(err);
            });
        },
        function(cb){   //保存到数据库
            var table = dc.pg.get("chapter_block");
            table.save(chapter, function(err, data){
                if(err)
                {
                    console.log(err);
                }
                cb(err);
            });
        }
    ], function (err, result) {
        cb(err, backBodyNode);
    });
};

/**
 * 删除小节
 * @param headNode
 * @param bodyNode
 * @param cb
 */
Control.prototype.handleBK06 = function (headNode, bodyNode, cb) {
    var self = this;
    var backBodyNode = {};
    var cond = {
        id:bodyNode.id
    };
    async.waterfall([
        function(cb){   //删除章节，并返回seq的值
            var table = dc.pg.get("chapter_block");
            table.remove(cond, {ret:{seq:1, chapter_id:1}}, function(err, data){
                cb(err, data.rst[0]);
            })
        },
        function(set, cb)    //后序章节前移
        {
            var table = dc.pg.get("chapter_block");
            var cond = {
                chapter_id:set.chapter_id,
                seq:{
                    $gt:set.seq
                }
            };
            var doc = {
                $inc:{
                    seq:-1
                }
            }
            table.update(cond, doc, function(err, data){
                cb(null);
            });
        }
    ], function (err, result) {
        cb(err, backBodyNode);
    });
};

/**
 * 添加小节内容
 * @param headNode
 * @param bodyNode
 * @param cb
 */
Control.prototype.handleBK07 = function (headNode, bodyNode, cb) {
    var self = this;
    var backBodyNode = {};
    var cond = {
        id:bodyNode.id
    };
    var doc = {
        $set: {
            content:bodyNode.content
        }
    };
    async.waterfall([
        function(cb){   //修改小节的内容
            var table = dc.pg.get("chapter_block");
            table.update(cond, doc, function(err, data){
                cb(err);
            });
        }
    ], function (err, result) {
        cb(err, backBodyNode);
    });
};

module.exports = new Control();