var async = require('async');

var config = require('config');
var ec = config.ec;
var prop = config.prop;

var cons = require('cons');
var keyFromType = cons.keyFromType;
var customerType = cons.customerType;

var esut = require('easy_util');
var digestUtil = esut.digestUtil;
var log = esut.log;
var dateUtil = esut.dateUtil;

var dc = require('db').dc;

var Control = function () {
    var self = this;
    var cmdArray = [
        {code: 'U01', fromType: keyFromType.DB, des: "用户登陆"},
        {code: 'U02', fromType: keyFromType.NONE, des: "用户注册"},
        {code: 'U03', fromType: keyFromType.CACHE, des: "用户信息查询"},
        {code: 'U04', fromType: keyFromType.CACHE, des: "设置书籍封面"}
    ];
    self.cmd = {};
    for(var i = 0; i < cmdArray.length; i++)
    {
        var set = cmdArray[i];
        self.cmd[set.code] = set;
    }
};

Control.prototype.checkU01 = function (headNode, bodyNode, cb) {
    cb(null);
};

Control.prototype.checkU02 = function (headNode, bodyNode, cb) {
    cb(null);
};

Control.prototype.checkU03 = function (headNode, bodyNode, cb) {
    cb(null);
};

Control.prototype.checkU04 = function (headNode, bodyNode, cb) {
    cb(null);
};

/**
 * 用户登录
 * @param headNode
 * @param bodyNode
 * @param cb
 */
Control.prototype.handleU01 = function (headNode, bodyNode, cb) {
    var backBody = {};
    var stInfoTable = dc.pg.get("st_info");
    var userId = parseInt(headNode.userId);
    backBody.userId = userId;
    stInfoTable.find({id: userId}, {}, function (err, data) {
        console.log(data);
        if(data && data.affected > 0)    //已经登录过，需判断是否超时
        {
            var set = data.rst[0];
            var newSt = set.st;
            var now = new Date().getTime();
            if (now - dateUtil.toDate(set.last_active_time).getTime() > prop.loginExpiredSeconds * 1000) {
                //expired
                newSt = digestUtil.createUUID();
            }
            backBody.st = newSt;
            stInfoTable.update({id: userId}, {$set:{last_active_time: dateUtil.getCurTime(), st: newSt}},
                function (err, data) {
                    cb(null, backBody);
                });
        }
        else
        {
            var st = digestUtil.createUUID();
            var stInfo = {
                id: userId, st: st, last_active_time: dateUtil.getCurTime(),
                role:customerType[headNode.userType].id
            };
            stInfoTable.save(stInfo, function (err, data) {
                backBody.st = st;
                cb(null, backBody);
            });
        }
    });
};

/**
 * 用户注册
 * @param headNode
 * @param bodyNode
 * @param cb
 */
Control.prototype.handleU02 = function (headNode, bodyNode, cb) {
    var backBody = {};
    var table = dc.pg.get("customer");
    async.waterfall([
        function(cb)    //判断用户名是否已经存在
        {
            var cond = {
                $or:[
                    {username:bodyNode.username},
                    {nickname:bodyNode.nickname}
                ]
            }
            table.find(cond, {}, function(err, data){
                if(err)
                {
                    cb(ec[9999]);
                }
                else
                {
                    if(data.affected > 0)
                    {
                        cb(ec[1008]);
                    }
                    else
                    {
                        cb(null);
                    }
                }
            });
        },
        function(cb)    //保存用户信息
        {
            var customer = {
                username:bodyNode.username,
                nickname:bodyNode.nickname,
                password:bodyNode.password,
                type:customerType.NORMAL.id,
                reg_time:dateUtil.getCurTime()
            }
            table.save(customer, function(err, data){
                if(err)
                {
                    cb(ec[9999]);
                }
                else
                {
                    cb(null);
                }
            });
        }
    ], function (err, rst) {
        cb(err, backBody);
    });
};

/**
 * 用户信息查询
 * @param headNode
 * @param bodyNode
 * @param cb
 */
Control.prototype.handleU03 = function (headNode, bodyNode, cb) {
    var backBody = {};
    var userId = parseInt(headNode.userId);
    async.waterfall([
        function(cb)    //根据id查询用户信息
        {
            var table = dc.pg.get("customer");
            var cond = {id:userId};
            var cols = {
                id:1,
                username:1,
                nickname:1,
                status:1,
                experience:1,
                gold:1
            }
            table.find(cond, cols, function(err, data){
                if(data && data.rst.length > 0)
                {
                    backBody.user = data.rst[0];
                    cb(null);
                }
                else
                {
                    cb(ec[101]);
                }
            });
        }
    ], function (err, rst) {
        cb(err, backBody);
    });
};

/**
 * 设置书籍封面
 * @param headNode
 * @param bodyNode
 * @param cb
 */
Control.prototype.handleU04 = function (headNode, bodyNode, cb) {
    var backBody = {};
    var fileId = bodyNode.fileId;
    var bookId = bodyNode.bookId;
    async.waterfall([
        function(cb)    //删除文件
        {
            var table = dc.pg.get("book");
            var cond = {id:bookId};
            var doc = {
                $set:{
                    cover_id:fileId
                }
            }
            table.update(cond, doc, function(err, data){
                cb(err);
            });
        }
    ], function (err, rst) {
        cb(err, backBody);
    });
};

module.exports = new Control();