var async = require('async');

var config = require('config');
var ec = config.ec;
var prop = config.prop;

var cons = require('cons');
var keyFromType = cons.keyFromType;
var customerType = cons.customerType;

var esut = require('easy_util');
var digestUtil = esut.digestUtil;
var log = esut.log;
var dateUtil = esut.dateUtil;

var dc = require('db').dc;

//var game = require('game');

var Control = function () {
    var self = this;
    var cmdArray = [
        {code: 'U01', fromType: keyFromType.DB, des: "用户登陆"},
        {code: 'U02', fromType: keyFromType.NONE, des: "用户注册"},
        {code: 'U03', fromType: keyFromType.CACHE, des: "用户信息查询"},
        {code: 'U04', fromType: keyFromType.CACHE, des: "设置书籍封面"},
        {code: 'U05', fromType: keyFromType.CACHE, des: "用户投注"},  //added by XiaoXu
        {code: 'U06', fromType: keyFromType.CACHE, des: "查询奖池"},
        {code: 'U07', fromType: keyFromType.CACHE, des: "富豪榜"},
        {code: 'U08', fromType: keyFromType.CACHE, des: "用户完成任务"}
    ];
    self.cmd = {};
    for(var i = 0; i < cmdArray.length; i++)
    {
        var set = cmdArray[i];
        self.cmd[set.code] = set;
    }
};

Control.prototype.checkU01 = function (headNode, bodyNode, cb) {
    cb(null);
};

Control.prototype.checkU02 = function (headNode, bodyNode, cb) {
    cb(null);
};

Control.prototype.checkU03 = function (headNode, bodyNode, cb) {
    cb(null);
};

Control.prototype.checkU04 = function (headNode, bodyNode, cb) {
    cb(null);
};

Control.prototype.checkU05 = function (headNode, bodyNode, cb){  //投注数据格式检测
    var ticket = bodyNode.ticket;
    async.waterfall([
        function(cb)    //票据字段必须存在
        {
            if(ticket)
            {
                cb(null);
            }
            else
            {
                cb(ec[2000]);
            }
        },
        function(cb)    //游戏和投注号码必须存在
        {
            if(typeof ticket.game_code != 'string' ||
                typeof ticket.number != 'string')
            {
                cb(ec[2000]);
            }
            else
            {
                cb(null);
            }
        },
        function(cb)    //游戏是否正在销售
        {
            var table = dc.pg.get('game');
            table.find({code:ticket.game_code}, {}, function(err, data){
                if(err || data.rst.length < 1)
                {
                    cb(ec[2001]);
                }
                else
                {
                    var set = data.rst[0];
                    if(set.status != cons.gameStatus.OPEN.id)
                    {
                        cb(ec[2001]);
                    }
                    else
                    {
                        cb(null);
                    }
                }
            });
        }/**,
        function(cb)    //检验号码格式
        {
            game.validateFactory.do(ticket, function(err, data){
                cb(err);
            });
        }*/
    ], function (err) {
        cb(err);
    });
};

Control.prototype.checkU06 = function(headNode, bodyNode, cb){
    cb(null);
};

Control.prototype.checkU07 = function(headNode, bodyNode, cb){
    cb(null);
};

Control.prototype.checkU08 = function(headNode, bodyNode, cb){
    var task_log = bodyNode.task_log;
    async.waterfall([
        function(cb)    //任务记录字段必须存在
        {
            if(task_log)
            {
                cb(null);
            }
            else
            {
                cb(ec[3000]);
            }
        },
        function(cb)    //用户id和任务id必须存在
        {
            if(typeof task_log.user_id != 'number' ||
                typeof task_log.task_id != 'number')
            {
                cb(ec[3000]);
            }
            else
            {
                cb(null);
            }
        },
        function(cb)    //任务是否正在线上
        {
            var table = dc.pg.get('task');
            table.find({id:task_log.task_id}, {}, function(err, data){
                if(err || data.rst.length < 1)
                {
                    cb(ec[3001]);
                }
                else
                {
                    var set = data.rst[0];
                    if(set.status != cons.taskStatus.ONLINE.id)
                    {
                        cb(ec[3002]);
                    }
                    else if(set.type != cons.taskType.REPEAT.id)        //if the task is unrepeatable, check if it has been completed
                    {
                        var taskLog = dc.pg.get('task_log');
                        taskLog.find({user_id:task_log.user_id, task_id:task_log.task_id}, {}, function(err, data){
                            if(err || data.rst.length > 0){
                                cb(ec[3003]);
                            }else{
                                cb(null);
                            }
                        });
                    }else{
                        cb(null);
                    }
                }
            });
        }
    ], function (err) {
        cb(err);
    });
};

/**
 * 用户登录
 * @param headNode
 * @param bodyNode
 * @param cb
 */
Control.prototype.handleU01 = function (headNode, bodyNode, cb) {
    var backBody = {};
    var stInfoTable = dc.pg.get("st_info");
    var userId = parseInt(headNode.userId);
    backBody.userId = userId;
    stInfoTable.find({id: userId}, {}, function (err, data) {
        console.log(data);
        if(data && data.affected > 0)    //已经登录过，需判断是否超时
        {
            var set = data.rst[0];
            var newSt = set.st;
            var now = new Date().getTime();
            if (now - dateUtil.toDate(set.last_active_time).getTime() > prop.loginExpiredSeconds * 1000) {
                //expired
                newSt = digestUtil.createUUID();
            }
            backBody.st = newSt;
            stInfoTable.update({id: userId}, {$set:{last_active_time: dateUtil.getCurTime(), st: newSt}},
                function (err, data) {
                    cb(null, backBody);
                });
        }
        else
        {
            var st = digestUtil.createUUID();
            var stInfo = {
                id: userId, st: st, last_active_time: dateUtil.getCurTime(),
                role:customerType[headNode.userType].id
            };
            stInfoTable.save(stInfo, function (err, data) {
                backBody.st = st;
                cb(null, backBody);
            });
        }
    });
};

/**
 * 用户注册
 * @param headNode
 * @param bodyNode
 * @param cb
 */
Control.prototype.handleU02 = function (headNode, bodyNode, cb) {
    var backBody = {};
    var table = dc.pg.get("customer");
    async.waterfall([
        function(cb)    //判断用户名是否已经存在
        {
            var cond = {
                $or:[
                    {username:bodyNode.username},
                    {nickname:bodyNode.nickname}
                ]
            }
            table.find(cond, {}, function(err, data){
                if(err)
                {
                    cb(ec[9999]);
                }
                else
                {
                    if(data.affected > 0)
                    {
                        cb(ec[1008]);
                    }
                    else
                    {
                        cb(null);
                    }
                }
            });
        },
        function(cb)    //保存用户信息
        {
            var customer = {
                username:bodyNode.username,
                nickname:bodyNode.nickname,
                password:bodyNode.password,
                type:customerType.NORMAL.id,
                reg_time:dateUtil.getCurTime()
            }
            table.save(customer, function(err, data){
                if(err)
                {
                    cb(ec[9999]);
                }
                else
                {
                    cb(null);
                }
            });
        }
    ], function (err, rst) {
        cb(err, backBody);
    });
};

/**
 * 用户信息查询
 * @param headNode
 * @param bodyNode
 * @param cb
 */
Control.prototype.handleU03 = function (headNode, bodyNode, cb) {
    var backBody = {};
    var userId = parseInt(headNode.userId);
    async.waterfall([
        function(cb)    //根据id查询用户信息
        {
            var table = dc.pg.get("customer");
            var cond = {id:userId};
            var cols = {
                id:1,
                username:1,
                nickname:1,
                status:1,
                experience:1,
                gold:1,
                login_days:1,
                acc_reward:1
            }
            table.find(cond, cols, function(err, data){
                if(data && data.rst.length > 0)
                {
                    backBody.user = data.rst[0];
                    cb(null);
                }
                else
                {
                    cb(ec[101]);
                }
            });
        }
    ], function (err, rst) {
        cb(err, backBody);
    });
};

/**
 * 设置书籍封面
 * @param headNode
 * @param bodyNode
 * @param cb
 */
Control.prototype.handleU04 = function (headNode, bodyNode, cb) {
    var backBody = {};
    var fileId = bodyNode.fileId;
    var bookId = bodyNode.bookId;
    async.waterfall([
        function(cb)    //删除文件
        {
            var table = dc.pg.get("book");
            var cond = {id:bookId};
            var doc = {
                $set:{
                    cover_id:fileId
                }
            }
            table.update(cond, doc, function(err, data){
                cb(err);
            });
        }
    ], function (err, rst) {
        cb(err, backBody);
    });
};

/**
 * 用户投注
 * @param headNode
 * @param bodyNode
 * @param cb
 */
Control.prototype.handleU05 = function (headNode, bodyNode, cb){
    var backBody = {};
    var ticket = bodyNode.ticket;
    var userId = parseInt(headNode.userId);
    var poolId = parseInt(bodyNode.id);
    async.waterfall([
        function(cb)    //扣款
        {
            var table = dc.pg.get("customer");
            var cond = {id:userId};
            var doc = {
                $inc: {
                    gold:ticket.amount*(-1)
                }
            };
            var ret = {
                gold:1
            };
            table.update(cond, doc, {ret:ret}, function(err, data){
                if(data && data.rst.length > 0)
                {
                    backBody.customer = {gold:data.rst[0].gold};
                    //cb(null);
                    var pool = dc.pg.get("goldPool");
                    var con = {id:poolId};
                    var doc = {
                        $inc: {
                            gold:ticket.amount
                        }
                    };
                    var ret = {gold:1};
                    pool.update(con, doc, {ret:ret},function(err, data){
                        if(data && data.rst.length > 0){
                            backBody.goldPool = {gold:data.rst[0].gold};
                            cb(null);
                        }else{
                            cb(err);
                        }
                    });
                }
                else
                {
                    cb(err);
                }
            });
        },
        function(cb)    //记录账户流水
        {
            var table = dc.pg.get("gold_log");
            var goldLog = {
                amount:(-1)*ticket.amount,
                before:backBody.customer.gold + ticket.amount,
                after:backBody.customer.gold,
                subject_id:cons.goldSubject.BET.id,
                remark:cons.goldSubject.BET.des,
                customer_id:userId,
                order_id:bodyNode.uuid
            };
            table.save(goldLog, function(err, data){
                cb(err);
            });
        },
        /**
        function(cb)    //算奖
        {
            game.checkFactory.do(ticket, function(err, data){
                backBody.ticket = ticket;
                cb(err);
            });
        },
        function(cb)    //计算中奖金额
        {
            var table = dc.pg.get("game_level");
            ticket.hit_amount = 0;
            var draw_info = ticket.draw_info;
            var draw_info_array = [];
            for(var key in draw_info)
            {
                draw_info_array.push(draw_info[key]);
            }
            ticket.draw_info = draw_info_array; //改成数组形式
            async.eachSeries(draw_info_array, function(info, callback) {
                var cond = {game_code:ticket.game_code, code:info.level};
                table.find(cond, {hit_amount:1}, function(err, data){
                    if(data && data.rst.length > 0)
                    {
                        ticket.hit_amount += data.rst[0].hit_amount;
                        callback();
                    }
                    else
                    {
                        callback(ec[9999]);
                    }
                });
            }, function(err){
                cb(err);
            });
        },*/
        function(cb)    //保存到数据库
        {
            var ticketToSave = {
                customer_id:userId,
                game_code:ticket.game_code,
                multiple:ticket.multiple,
                amount:ticket.amount,
                number:ticket.number,
                draw_number:JSON.stringify(ticket.draw_number),
                draw_info:JSON.stringify(ticket.draw_info),
                hit_amount:ticket.hit_amount,
                seq_id:bodyNode.uuid
            }
            var table = dc.pg.get("ticket");
            table.save(ticketToSave, function(err, data){
                console.log(err);
                cb(err);
            });
        },
        function(cb)    //如果中奖，进行返奖
        {
            if(ticket.hit_amount > 0)
            {
                var table = dc.pg.get("customer");
                var cond = {id:userId};
                var doc = {
                    $inc: {
                        gold:ticket.hit_amount,
                        acc_reward:ticket.hit_amount
                    }
                };
                var ret = {
                    gold:1,
                    acc_reward:1
                };
                table.update(cond, doc, {ret:ret}, function(err, data){
                    if(data && data.rst.length > 0)
                    {
                        backBody.customer.gold = data.rst[0].gold;
                        //cb(null);
                        var pool = dc.pg.get("goldPool");
                        var con = {id:poolId};
                        var doc = {
                            $inc: {
                                gold:ticket.hit_amount*(-1)
                            }
                        };
                        var ret = {gold:1};
                        pool.update(con, doc, {ret:ret},function(err, data){
                            if(data && data.rst.length > 0){
                                backBody.goldPool = {gold:data.rst[0].gold};
                                cb(null);
                            }else{
                                cb(err);
                            }
                        });
                    }
                    else
                    {
                        cb(err);
                    }
                });
            }
            else
            {
                cb(null);
            }
        },
        function(cb)    //记录账户流水
        {
            if(ticket.hit_amount > 0) {
                var table = dc.pg.get("gold_log");
                var goldLog = {
                    amount: ticket.hit_amount,
                    before: backBody.customer.gold - ticket.hit_amount,
                    after: backBody.customer.gold,
                    subject_id: cons.goldSubject.HIT.id,
                    remark: cons.goldSubject.HIT.des,
                    customer_id: userId,
                    order_id: bodyNode.uuid
                };
                    table.save(goldLog, function (err, data) {
                        cb(err);
                    });
            }
            else
            {
                cb(null);
            }
        }
    ], function (err, rst) {
        cb(err, backBody);
    });
};

/**
 * 查询奖池
 * @param headNode
 * @param bodyNode
 * @param cb
 */
Control.prototype.handleU06 = function(headNode, bodyNode, cb){
    var backBody = {};
    var poolId = parseInt(bodyNode.id);
    async.waterfall([
        function(cb)    //根据id查询奖池信息
        {
            var table = dc.pg.get("goldPool");
            var cond = {id:poolId};
            var cols = {
                id:1,
                gold:1,
                date:1
            }
            table.find(cond, cols, function(err, data){
                if(data && data.rst.length > 0)
                {
                    backBody.goldPool = data.rst[0];  //return information
                    cb(null);
                }
                else
                {
                    cb(ec[101]);
                }
            });
        }
    ], function (err, rst) {
        cb(err, backBody);
    });
};

/**
 * 富豪榜
 * @param headNode
 * @param bodyNode
 * @param cb
 */
Control.prototype.handleU07 = function(headNode, bodyNode, cb){
    var backBody = {};
    async.waterfall([
        function(cb)
        {
            var table = dc.pg.get("customer");
            var cons = {type:1};
            var cols = {username:1, acc_reward:1};
            var options = {sort:{acc_reward:-1}, limit:10};
            table.find(cons, cols, options, function(err, data){
                if(data)
                {
                    backBody.rst = data.rst;  //return information

                }
                cb(err);
            });
        }
    ], function (err, rst) {
        cb(err, backBody);
    });
};

/**
 * 用户完成任务
 * @param headNode
 * @param bodyNode
 * @param cb
 */
Control.prototype.handleU08 = function(headNode, bodyNode, cb){
    var backBody = {};
    var task_log = bodyNode.task_log;
    async.waterfall([
        function(cb)    //返奖
        {
            var table = dc.pg.get("customer");
            var cond = {id:task_log.user_id};
            var doc = {
                $inc: {
                    gold:task_log.reward_gold,
                    experience:task_log.reward_exp
                }
            };
            var ret = {
                gold:1,
                experience:1
            };
            table.update(cond, doc, {ret:ret}, function(err, data){
                if(data && data.rst.length > 0)
                {
                    backBody.customer = {gold:data.rst[0].gold, experience:data.rst[0].experience};
                    cb(null);
                }
                else
                {
                    cb(err);
                }
            });
        },
        function(cb)    //记录账户流水
        {
            var table = dc.pg.get("gold_log");
            var goldLog = {
                amount:task_log.reward_gold,
                before:backBody.customer.gold - task_log.reward_gold,
                after:backBody.customer.gold,
                subject_id:cons.goldSubject.SYSTEM_GIVE.id,
                remark:cons.goldSubject.SYSTEM_GIVE.des,
                customer_id:task_log.user_id,
                order_id:bodyNode.uuid
            };
            table.save(goldLog, function(err, data){
                cb(err);
            });
        },
        function(cb)    //保存到数据库
        {
            var taskLogToSave = {
                user_id:task_log.user_id,
                task_id:task_log.task_id,
                reward_exp:task_log.reward_exp,
                reward_gold:task_log.reward_gold
            };
            var table = dc.pg.get("task_log");
            table.save(taskLogToSave, function(err, data){
                console.log(err);
                cb(err);
            });
        }
    ], function (err, rst) {
        cb(err, backBody);
    });
};
module.exports = new Control();