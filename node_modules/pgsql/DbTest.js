var async = require('async');
var DataBase = require('./DataBase.js');
var Table = require('./Table.js');
var Column = require('./Column.js');

var db = new DataBase({
    url:"host=127.0.0.1 dbname=test user=postgres",
    cmPoolSize:20,  //通过table.find,update,remove,save都使用这个连接池的连接
    trPoolSize:5,   //db.getConn获得连接都是这个连接池的连接
    esPoolSize:1    //这个一个连接的连接池专门用来执行escape
});

var testTable = new Table("test",[
        new Column("id", "SERIAL", 0, "primary key"),
        new Column("index", "SERIAL", 0, ""),
        new Column("name", "text", -1, ""),
        new Column("description", "text", -1, "")
    ]
);
testTable.colList['description'].escape = true; //需要对文本进行转义
db.put(testTable);

async.waterfall([
    function(cb){   //连接数据库
        db.init(function(err, data){
            console.log(data);
            cb(err);
        });
    },
    function(cb)
    {
        var t = db.get("test");
        console.log(t.getDdl());
        t.find({id:3}, {}, function(err, data){
            console.log(data);
            cb(err);
        });
    },
    function(cb)
    {
        var t = db.get("test");
        var doc = {
            $set:{
                name:"just a test."
            }
        };
        t.update({id:3}, doc, function(err, data){
            console.log(data);
            cb(err);
        });
    },
    function(cb)
    {
        var t = db.get("test");
        var options = {
            limit:10,
            offset:0,
            sort:{
                id:-1
            }
        };
        t.find({id:3}, {}, options, function(err, data){
            console.log(data);
            cb(err);
        });
    },
    function(cb)    //save a set
    {
        var t = db.get("test");
        t.save({name:"liming", description:'a\'b'}, function(err, data){
            console.log(data);
            cb(err);
        });
    },
    function(cb)    //保存记录，并返回自增长的id
    {
        var t = db.get("test");
        var options = {
            ret:{
                id:1
            }
        };
        t.save({name:"liming", description:'a\'b'}, options, function(err, data){
            console.log(data);
            cb(err);
        });
    },
    function(cb)
    {
        var t = db.get("test");
        t.remove({name:"test222"}, function(err, data){
            console.log(data);
            cb(err);
        });
    },
    function(cb)    //跨表的语句，请使用db.execute直接执行
    {
        db.execute("select * from customer", function(err, data){
            console.log(data);
            cb(err);
        });
    },
    /* 执行事务 */
    function(cb){
        db.getConn(function(err, conn){
            cb(err, conn);
        });
    },
    function(conn, cb)
    {
        conn.execute("BEGIN", function(err, data){
            console.log(data);
            cb(err, conn);
        });
    },
    function(conn, cb)
    {
        conn.execute("DECLARE myportal CURSOR FOR select * from test", function(err, data){
            console.log(data);
            cb(err, conn);
        });
    },
    function(conn, cb)
    {
        var hasNext = true;
        async.whilst(
            //条件
            function() {
                return hasNext;   //true，则第二个函数会继续执行，否则，调出循环
            },
            function(whileCb) { //循环的主体
                conn.execute("FETCH NEXT in myportal", function(err, data){
                    if(data && data.affected > 0)
                    {
                        console.log(data);
                    }
                    else
                    {
                        hasNext = false;
                    }
                    whileCb(err);
                });
            },
            function(err) {         //here 如果条件不满足，或者发生异常
                cb(err, conn);
            }
        );
    },
    function(conn, cb)
    {
        conn.execute("CLOSE myportal", function(err, data){
            console.log(data);
            cb(err, conn);
        });
    },
    function(conn, cb)
    {
        conn.execute("END", function(err, data){
            console.log(data);
            cb(err, conn);
        });
    }
], function (err, conn) {
    if(conn)
    {
        //使用完连接，记得归还给连接池
        db.unLock(conn);
    }
    if(err)
    {
        console.log("the error is:");
        console.error(err);
    }
});


