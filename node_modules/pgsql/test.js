var async = require('async');
var Pool = require('./Pool.js');

var config = {
    db:"host=127.0.0.1 dbname=test user=postgres",
    size:20
};

var pool, conn;
async.waterfall([
    function(cb){   //初始化连接池
        var initPool = new Pool(config, function(err, data){
            pool = initPool;
            cb(err);
        });
    },
    function(cb){   //获得连接
        pool.getConn(function(err, data){
            if(err)
            {
                cb(err);
            }
            else
            {
                conn = data;
                cb(null);
            }
        });
    },
    function(cb)
    {
        conn.execute("select * from test limit 2;", function(err, data){
            console.log(data);
            cb(err);
        });
    },
    function(cb)
    {
        conn.execute("BEGIN", function(err, data){
            console.log(data);
            cb(err);
        });
    },
    function(cb)
    {
        conn.execute("DECLARE myportal CURSOR FOR select * from test", function(err, data){
            console.log(data);
            cb(err);
        });
    },
    function(cb)
    {
        var hasNext = true;
        async.whilst(
            //条件
            function() {
                return hasNext;   //true，则第二个函数会继续执行，否则，调出循环
            },
            function(whileCb) { //循环的主体
                conn.execute("FETCH NEXT in myportal", function(err, data){
                    if(data && data.affected > 0)
                    {
                        console.log(data);
                    }
                    else
                    {
                        hasNext = false;
                    }
                    whileCb(err);
                });
            },
            function(err) {         //here 如果条件不满足，或者发生异常
                cb(err);
            }
        );
    },
    function(cb)
    {
        conn.execute("CLOSE myportal", function(err, data){
            console.log(data);
            cb(err);
        });
    },
    function(cb)
    {
        conn.execute("END", function(err, data){
            console.log(data);
            cb(err);
        });
    }
], function (err, result) {
    pool.unLock(conn);
    if(err)
    {
        console.error(err); // -> null
    }
});