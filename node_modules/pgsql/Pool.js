var async = require('async');

var Events = require("events");

var PgModule = require('./build/Test');
var PgConn = PgModule.PgConnectionWrap;

/**
 * config.db 数据库地址信息,config.size 连接池大小
 * @param config
 * @constructor
 */
var Pool = function(config, cb){
    var self = this;
    self.config = config;
    self.idles = [];
    self.locks = [];    //优先获得连接资源的请求数组
    self.buffer = [];
    self.cmdCount = 0;

    self.ee = new Events.EventEmitter();    //事件处理
    self.ee.setMaxListeners(0); //不限制最高cmd数目
    self.ee.on("cmd", function(){
        self.cmdCount++;
        if(self.buffer.length > 0 && self.idles.length > 0)
        {
            var buf = [];
            while(true)
            {
                var conn = self.idles.pop();
                if(conn == null)
                {
                    break;
                }
                var curCmd = self.buffer.pop();
                if(curCmd == null)
                {
                    self.idles.push(conn);
                    break;
                }
                buf.push({cmdAndCb:curCmd, conn:conn});
            }
            async.each(buf, function(relation, callback) {
                relation.conn.execute(relation.cmdAndCb.cmd, function(err, data){
                    self.unLock(relation.conn);
                    callback();
                    relation.cmdAndCb.cb(err, data);
                });
            }, function(err){
            });
        }
    });

    for(var i = 0; i < self.config.size; i++)
    {
        self.idles[i] = new PgConn(self.config.db);
        self.idles[i].poolIndex = i;
    }

    async.eachSeries(self.idles, function(conn, callback) {
        conn.build(function(err, data){
            callback(err);
        });
    }, function(err){
        cb(err, "Pool init success!");
    });
};

/**
 * 获得一个连接，一般情况下，请直接使用execute方法
 */
Pool.prototype.getConn = function(cb)
{
    var self = this;
    var conn = self.idles.pop();
    if(conn)    //有空闲资源，直接返回
    {
        cb(null, conn);
    }
    else    //没有空闲资源，加入等待队列
    {
        self.locks.push({cb:cb});
    }
};

Pool.prototype.escape = function(str)
{
    var conn = this.idles[0];
    return conn.escape(str);
};

/**
 * 解锁
 * @param conn
 */
Pool.prototype.unLock = function(conn)
{
    var self = this;
    //如果有locks的请求，优先给locks
    if(self.locks.length > 0)
    {
        var lock = self.locks.pop();
        lock.cb(null, conn);
    }
    else
    {
        self.idles.push(conn);
        if(self.buffer.length > 0 && self.idles.length > self.config.size/2)    //设置空闲连接的最小数目，可以有效减少消息数目
        {
            self.ee.emit("cmd");
        }
    }
};

/**
 * 使用一个随机的连接执行cmd
 * @param cmd
 * @param cb
 */
Pool.prototype.execute = function(cmd, cb)
{
    var self = this;
    self.buffer.push({cmd:cmd, cb:cb});
    self.ee.emit("cmd");
};

module.exports = Pool;









