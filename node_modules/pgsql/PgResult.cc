/*
 * PgResult.cc
 *
 *  Created on: 2015年3月20日
 *      Author: liming
 */

#include <postgres.h>
#include <libpq-fe.h>
#include <catalog/pg_type.h>

#include "PgResult.h"

PgResult::PgResult(PGresult *res)
{
	this->res = res;
}

PgResult::~PgResult()
{
	PQclear(this->res);
	//vs_log_info("result销毁成功");
}

/**
 * 执行的cmd的结果是否可用
 */
bool PgResult::available()
{
	int resStatus = PQresultStatus(this->res);
	if(resStatus == PGRES_TUPLES_OK || resStatus == PGRES_COMMAND_OK)
	{
		return true;
	}
	else
	{
		return false;
	}
}

/**
 * 转换成nodejs对象
 */
Handle<Object> PgResult::toNodeResult(Isolate* isolate)
{
	Handle<Object> nodeObject = Object::New(isolate);
	//设置受影响的记录数目
	nodeObject->Set(
			String::NewFromUtf8(isolate, "affected"),
			this->getValue(isolate, PQcmdTuples(this->res), INT4OID)
	);
	Handle<Array> rstObject = Array::New(isolate);
	int rows = PQntuples(this->res);
	int cols = PQnfields(this->res);
	int colTypes[cols];
	for(int j = 0; j < cols; j++)
	{
		Oid colType = PQftype(this->res, j);
		colTypes[j] = colType;
	}
	for(int i = 0; i < rows; i++)
	{
		Handle<Object> rowObject = Object::New(isolate);
		for(int j = 0; j < cols; j++)
		{
			const char* colName = PQfname(this->res, j);
			rowObject->Set(
					String::NewFromUtf8(isolate, colName),
					this->getValue(isolate, PQgetvalue(this->res, i, j), colTypes[j])
			);
			rstObject->Set(i, rowObject);
		}
	}
	nodeObject->Set(
			String::NewFromUtf8(isolate, "rst"),
			rstObject
	);
	return nodeObject;
}

/**
 * 跟据列的字符串数据和列的类型，转换成nodejs所需的类型
 */
Handle<Value> PgResult::getValue(Isolate* isolate, const char* strValue, Oid type)
{
	//printf("the type is:%d\n", type);
	if(type == INT4OID || type == INT8OID)
	{
		return Number::New(isolate, atoi(strValue));
	}
	else
	{
		return String::NewFromUtf8(isolate, strValue);
	}
}



