/*
 * PgConnectionWrap.cc
 *
 *  Created on: 2015年3月20日
 *      Author: liming
 */

#include <node/uv.h>

#include "PgConnectionWrap.h"
#include "PgWorkData.h"
#include "VsNodeUtil.h"

using namespace v8;

Persistent<Function> PgConnectionWrap::constructor;

PgConnectionWrap::PgConnectionWrap() {
	this->config = NULL;
	this->conn = NULL;
}

PgConnectionWrap::PgConnectionWrap(VsString* config) {
	this->config = vs_string_clone(config);
	this->conn = NULL;
}

PgConnectionWrap::~PgConnectionWrap() {
	vs_string_destroy(this->config);
	delete this->conn;
}

void PgConnectionWrap::Init(Handle<Object> exports) {
	Isolate* isolate = Isolate::GetCurrent();

	// Prepare constructor template
	Local<FunctionTemplate> tpl = FunctionTemplate::New(isolate, New);
	tpl->SetClassName(String::NewFromUtf8(isolate, "PgConnectionWrap"));
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	// Prototype
	NODE_SET_PROTOTYPE_METHOD(tpl, "build", Build);
	NODE_SET_PROTOTYPE_METHOD(tpl, "execute", Execute);
	NODE_SET_PROTOTYPE_METHOD(tpl, "escape", Escape);

	constructor.Reset(isolate, tpl->GetFunction());
	exports->Set(String::NewFromUtf8(isolate, "PgConnectionWrap"),
			tpl->GetFunction());
}

void PgConnectionWrap::New(const FunctionCallbackInfo<Value>& args) {
	Isolate* isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	if (args.IsConstructCall()) {
		if(!args[0]->IsUndefined())
		{
			VsString* config = vs_node_util_arg_to_string(args[0]);
			PgConnectionWrap* obj = new PgConnectionWrap(config);
			vs_string_destroy(config);
			obj->Wrap(args.This());
			args.GetReturnValue().Set(args.This());
		}
		else
		{
			PgConnectionWrap* obj = new PgConnectionWrap();
			obj->Wrap(args.This());
			args.GetReturnValue().Set(args.This());
		}
	} else {
		// Invoked as plain function `MyObject(...)`, turn into construct call.
		const int argc = 0;
		Local<Value> argv[argc] = { };
		Local<Function> cons = Local<Function>::New(isolate, constructor);
		args.GetReturnValue().Set(cons->NewInstance(argc, argv));
	}
}

/**
 * 建立连接
 */
void PgConnectionWrap::Build(const FunctionCallbackInfo<Value>& args) {
	Isolate* isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	//获得当前数据库连接对象
	PgConnectionWrap* obj = ObjectWrap::Unwrap<PgConnectionWrap>(args.Holder());

	PgConnBuildWorkData* data = new PgConnBuildWorkData();
	data->callback.Reset(isolate, Local<Function>::Cast(args[0]));
	data->conn = obj;

	uv_work_t *req = new uv_work_t();
	req->data = data;
	uv_queue_work(uv_default_loop(), req, BuildWork, (uv_after_work_cb)BuildWorkAfter);
	args.GetReturnValue().SetUndefined();
}

/**
 * 建立连接
 */
bool PgConnectionWrap::build() {
	PgConnection *pc = new PgConnection(this->config);
	if(pc->availabe())
	{
		this->conn = pc;
		return true;
	}
	else
	{
		return false;
	}
}

/**
 * 处理数据库连接的消息循环
 */
void PgConnectionWrap::BuildWork(uv_work_t* req) {
	PgConnBuildWorkData* data = static_cast<PgConnBuildWorkData*>(req->data);
	PgConnection *pc = new PgConnection(data->conn->config);
	if(pc->availabe())
	{
		data->code = vs_string_init("OK");
	}
	else
	{
		data->error = true;
		data->code = vs_string_init(pc->lastError());
	}
	data->conn->conn = pc;
}

/**
 * 异步消息的后续处理
 */
void PgConnectionWrap::BuildWorkAfter(uv_work_t* req) {
	Isolate* isolate = Isolate::GetCurrent();
	PgConnBuildWorkData* data = static_cast<PgConnBuildWorkData*>(req->data);
	const unsigned argc = 2;    //我们传递一个参数到js中去
	Local<Value> error, backData;
	if(data->error)
	{
		error = String::NewFromUtf8(isolate, data->code->pt);
		backData = Null(isolate);
	}
	else
	{
		error = Null(isolate);
		backData = String::NewFromUtf8(isolate, data->code->pt);
	}
	Local<Value> argv[argc] = {error, backData};
	Local<Function> cb = Local<Function>::New(isolate, data->callback);
	cb->Call(isolate->GetCurrentContext()->Global(), argc, argv);
	data->callback.Reset();
	delete data;
	delete req;
}

/**
 * 建立连接
 */
void PgConnectionWrap::Execute(const FunctionCallbackInfo<Value>& args) {
	Isolate* isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	//获得当前数据库连接对象
	PgConnectionWrap* obj = ObjectWrap::Unwrap<PgConnectionWrap>(args.Holder());

	PgConnExecuteWorkData* data = new PgConnExecuteWorkData();
	data->callback.Reset(isolate, Local<Function>::Cast(args[1]));
	data->conn = obj;
	data->cmd = vs_node_util_arg_to_string(args[0]);	//cmd交由data销毁
	//vs_log_info(data->cmd);

	uv_work_t *req = new uv_work_t();
	req->data = data;
	uv_queue_work(uv_default_loop(), req, ExecuteWork, (uv_after_work_cb)ExecuteWorkAfter);
	args.GetReturnValue().SetUndefined();
}

/**
 * 处理数据库连接的消息循环
 */
void PgConnectionWrap::ExecuteWork(uv_work_t* req) {
	PgConnExecuteWorkData* data = static_cast<PgConnExecuteWorkData*>(req->data);
	PgResult *pr = data->conn->conn->execute(data->cmd);
	data->pr = pr;
	if(!pr->available())
	{
		data->error = true;
		data->errorMsg = vs_string_init(data->conn->conn->lastError());
	}
}

/**
 * 异步消息的后续处理
 */
void PgConnectionWrap::ExecuteWorkAfter(uv_work_t* req) {
	Isolate* isolate = Isolate::GetCurrent();
	PgConnExecuteWorkData* data = static_cast<PgConnExecuteWorkData*>(req->data);
	const unsigned argc = 2;    //我们传递一个参数到js中去
	Local<Value> error, backData;
	if(data->error)
	{
		error = String::NewFromUtf8(isolate, data->errorMsg->pt);
		backData = Null(isolate);
	}
	else
	{
		error = Null(isolate);
		backData = data->pr->toNodeResult(isolate);
	}
	Local<Value> argv[argc] = {error, backData};
	Local<Function> cb = Local<Function>::New(isolate, data->callback);
	cb->Call(isolate->GetCurrentContext()->Global(), argc, argv);
	data->callback.Reset();	//reset可以手动回收内存
	delete data;	//删除数据
	delete req;	//删除工作请求
}

/**
 * 对字符串的值进行转义
 */
void PgConnectionWrap::Escape(const FunctionCallbackInfo<Value>& args) {
	Isolate* isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	//获得当前数据库连接对象
	PgConnectionWrap* obj = ObjectWrap::Unwrap<PgConnectionWrap>(args.Holder());
	VsString* str = vs_node_util_arg_to_string(args[0]);
	char* backStr = PQescapeLiteral(obj->conn->conn, str->pt, str->length);
	vs_string_destroy(str);
	Local<Value> backValue = String::NewFromUtf8(isolate, backStr);
	PQfreemem(backStr);
	args.GetReturnValue().Set(backValue);
}

