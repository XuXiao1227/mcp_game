var DbUtil = function()
{
};

/**
 * 获得键值对表达的字符串
 * @param col
 * @param op
 * @param value
 * @returns {string}
 */
DbUtil.prototype.getKvPair = function(col, op, value)
{
    var self = this;
    var exp = col.name + " " + op + " ";
    if(col.type == 'integer' || col.type == "bigint")
    {
        exp += value;
    }
    else if(op == 'in')
    {
        exp += value;
    }
    else
    {
        if(col.escape)  //if need escape before cmd
        {
            exp += col.table.db.escape(value);
        }
        else
        {
            exp += "'" + value + "'";
        }
    }
    return exp;
};

/**
 * 获得data条件所表示的sql的where条件字符串
 * @param table
 * @param data
 * @param parentKey
 */
DbUtil.prototype.condition = function(table, data, parentKey)
{
    var self = this;
    var conditionStr = "";
    var i = 0;
    var parentCol = table.colList[parentKey];
    for(var key in data) {
        if (i > 0)
        {
            conditionStr += " and ";
        }
        var conditionArray = key.match(/\$([a-z]+)/);
        if(!conditionArray) //key以$开始，value肯定是一个表达式
        {
            var kv = "(";
            if(typeof data[key] == 'object')
            {
                kv += self.condition(table, data[key], key);
            }
            else
            {
                var col = table.colList[key];
                kv += self.getKvPair(col, "=", data[key]);
            }
            kv += ")";
            conditionStr += kv;
        }
        else
        {
            var expression = "";
            if(conditionArray[1] == 'or')
            {
                expression += "(";
                var orKeyCount = 0;
                var orKeyData = data[key];
                for(var orKey in orKeyData)
                {
                    if(orKeyCount > 0)
                    {
                        expression += ' or ';
                    }
                    expression += self.condition(table, orKeyData[orKey]);
                    orKeyCount++;
                }
                expression += ")";
            }
            else if(conditionArray[1] == 'gt')
            {
                expression += self.getKvPair(parentCol, ">", data[key]);
            }
            else if(conditionArray[1] == 'gte')
            {
                expression += self.getKvPair(parentCol, ">=", data[key]);
            }
            else if(conditionArray[1] == 'lt')
            {
                expression += self.getKvPair(parentCol, "<", data[key]);
            }
            else if(conditionArray[1] == 'lte')
            {
                expression += self.getKvPair(parentCol, "<=", data[key]);
            }
            else if(conditionArray[1] == 'ne')
            {
                expression += self.getKvPair(parentCol, "!=", data[key]);
            }
            else if(conditionArray[1] == 'in')
            {
                var inList = data[key];
                var inListCount = 0;
                var inStr = "(";
                for(var inListKey in inList)
                {
                    if(inListCount > 0)
                    {
                        inStr += ",";
                    }
                    var inValue = inList[inListKey];
                    if(typeof inValue == 'string')
                    {
                        inStr += "'" + inValue + "'";
                    }
                    else
                    {
                        inStr += inValue;
                    }
                    inListCount++;
                }
                inStr += ")";
                expression += self.getKvPair(parentCol, "in", inStr);
            }
            conditionStr += expression;
        }
        i++;
    }
    return conditionStr;
};

/**
 * 获得更新sql字符串
 * @param table
 * @param data
 * @returns {string}
 */
DbUtil.prototype.getUpdateStr = function(table, data)
{
    var self = this;
    var pStr = "";
    var kCount = 0;
    for(var key in data) {
        var keyArray = key.match(/\$([a-z]+)/);
        if (keyArray)
        {
            if (keyArray[1] == 'set')
            {
                var setData = data[key];
                for(var setKey in setData)
                {
                    var col = table.colList[setKey];
                    if(col == undefined)
                    {
                        //如果没有相关的列，则直接忽略
                        continue;
                    }
                    else
                    {
                        if(kCount > 0)
                        {
                            pStr += ",";
                        }
                        pStr += self.getKvPair(table.colList[setKey], "=", setData[setKey]);
                        kCount++;
                    }
                }
            }
            else if(keyArray[1] == 'inc')
            {
                var setData = data[key];
                for(var setKey in setData)
                {
                    var col = table.colList[setKey];
                    if(col == undefined)
                    {
                        //如果没有相关的列，则直接忽略
                        continue;
                    }
                    else
                    {
                        if(kCount > 0)
                        {
                            pStr += ",";
                        }
                        pStr += setKey + "=" + setKey;
                        if(setData[setKey] > 0)
                        {
                            pStr += "+";
                        }
                        pStr += setData[setKey];
                        kCount++;
                    }
                }
            }
        }
    }
    return pStr;
};

module.exports = new DbUtil();