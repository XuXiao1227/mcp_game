var dbUtil = require("./DbUtil.js");
var Column = require("./Column.js");

var Table = function(name, colList)
{
    var self = this;
    self.name = name;
    self.colList = new Array();
    self.nameRelation = {}; //oracle 时，记录字段的对应关系
    for(var key in colList)
    {
        var col = colList[key];
        col.table = self;   //设置列所属的表
        self.colList[col.name] = col;
    }
};

/**
 * 执行sql命令
 * @param cmd
 * @param cb
 */
Table.prototype.execute = function(cmd, cb)
{
    var self = this;
    console.log(cmd);
    self.db.cmPool.execute(cmd, cb);
};

/**
 * 查询满足条件的记录数目
 * @param data
 * @param cb
 */
Table.prototype.count = function(data, options, cb)
{
    var self = this;
    if(cb == undefined)
    {
        cb = options;
    }
    var sql = "select ";
    sql += "count(*)";
    sql += " from " + self.name;
    var conditionStr = dbUtil.condition(self, data);
    if(conditionStr.length > 0)
    {
        sql += " where " + conditionStr;
    }
    sql += self._getOptions(options);
    self.execute(sql, cb);
};

/**
 * 查询
 * @param data
 * @param cb
 */
Table.prototype.find = function(data, columns, options, cb)
{
    var self = this;
    if(cb == undefined)
    {
        cb = options;
    }
    var sql = "select ";
    var keyStr = '';
    var i = 0;
    for(var key in columns)
    {
        //如果没有相关的列，则直接忽略
        var tCol = self.colList[key];
        if(tCol == undefined)
        {
            continue;
        }
        if(i > 0)
        {
            keyStr += ",";
        }
        if(columns[key] == 1)
        {
            keyStr += key;
        }
        i++;
    }
    if(keyStr.length == 0)  //为空则选择所有的列
    {
        keyStr = '*';
    }
    sql += keyStr;
    sql += " from " + self.name;
    var conditionStr = dbUtil.condition(self, data);
    if(conditionStr.length > 0)
    {
        sql += " where " + conditionStr;
    }
    sql += self._getOptions(options);
    self.execute(sql, cb);
};

/**
 * excute update operation
 */
Table.prototype.update = function(condition, data, options, cb)
{
    var self = this;
    if(cb == undefined)
    {
        cb = options;
    }
    var sql = "update " + self.name + " set ";
    sql += dbUtil.getUpdateStr(self, data);
    var conditionStr = dbUtil.condition(self, condition);
    if(conditionStr.length > 0)
    {
        sql += " where " + conditionStr;
    }
    sql += self._getOptions(options);
    self.execute(sql, cb);
};

/**
 * 保存对象
 * @param cb
 */
Table.prototype.save = function(data, options, cb)
{
    var self = this;
    if(cb == undefined)
    {
        cb = options;
    }
    var sql = "insert into " + self.name + "(";
    var keyStr = '';
    var valueStr = '';
    var i = 0;
    for(var key in data)
    {
        //如果没有相关的列，则直接忽略
        var col = self.colList[key];
        if(col == undefined)
        {
            continue;
        }
        if(i > 0)
        {
            keyStr += ",";
            valueStr += ",";
        }
        keyStr += key;
        var value = data[key];
        if(typeof value == "string")
        {
            if(col.escape)
            {
                valueStr += col.table.db.escape(value);
            }
            else
            {
                valueStr += "'" + value + "'";
            }
        }
        else
        {
            valueStr += value;
        }
        i++;
    }
    sql += keyStr + ") values(" + valueStr + ")";
    sql += self._getOptions(options);
    self.execute(sql, cb);
};

/**
 * remove documents from table
 * @param condtion
 * @param option
 * @param cb
 */
Table.prototype.remove = function(condition, options, cb)
{
    var self = this;
    if(cb == undefined)
    {
        cb = options;
    }
    var sql = "delete from " + self.name;
    var conditionStr = dbUtil.condition(self, condition);
    if(conditionStr.length > 0)
    {
        sql += " where " + conditionStr;
    }
    sql += self._getOptions(options);
    self.execute(sql, cb);
};

/**
 * 当有ret属性时，添加返回的列
 * @param options
 * @returns {string}
 * @private
 */
Table.prototype._getOptions = function(options)
{
    var ret = "";
    if(typeof options == 'object')
    {
        if(options.sort)    //排序
        {
            var count = 0;
            for(var key in options.sort)
            {
                var set = options.sort[key];
                if(count > 0)
                {
                    ret += ", ";
                }
                else
                {
                    ret += " order by ";
                }
                ret += key;
                if(set[key] > 0)
                {
                    ret += " asc";
                }
                else
                {
                    ret += " desc";
                }
                count++;
            }
        }
        if(options.limit)    //limit
        {
            ret += " limit " + options.limit;
        }
        if(options.offset)    //offset
        {
            ret += " offset " + options.offset;
        }
        if(options.ret) //返回字段
        {
            var count = 0;
            for(var key in options.ret)
            {
                if(count > 0)
                {
                    ret += ", ";
                }
                else
                {
                    ret += " returning ";
                }
                ret += key;
                count++;
            }
        }
    }
    return ret;
};

/**
 * 获得建表的ddl语言
 */
Table.prototype.getDdl = function()
{
    var self = this;
    var sql = "create table " + self.name + "(";
    var colList = self.colList;
    var i = 0 ;
    for(var key in colList)
    {
        var col = colList[key];
        if(i > 0 ){
            sql += ", ";
        }
        sql += col.toString();
        i++;
    }
    sql += ");";
    return sql;
};

module.exports = Table;

