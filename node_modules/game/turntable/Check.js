var async = require('async');

var esut = require('easy_util');
var mathUtil = esut.mathUtil;

var Check = function(){};

/**
 * 算奖算法
 * @param ticket
 * @param cb
 */
Check.prototype.do = function(ticket, cb)
{
    var self = this;
    var drawInfo = {};
    var number = ticket.number;
    var intArray = mathUtil.getIntArrayFromStrArray(number.split(','));
    var drawNum = self.getDrawNum();
    var tempLevel = 99;
    ticket.draw_number = drawNum;
    async.eachSeries(intArray, function(num, callback) {
        self.checkOne(num, drawNum, function(data){
            //合并奖级信息
            if(data.level > 0 && data.level < tempLevel)
            {
                tempLevel = data.level;
            }
            callback();
        });
    }, function(err){
        if(tempLevel != 99){
            drawInfo[tempLevel] = {level:tempLevel, count:1};
        }
        ticket.draw_info = drawInfo;
        cb(err);
    });
};

/**
 * 对单个号码进行算奖
 * @param num
 * @param cb
 */
Check.prototype.checkOne = function(num, drawNum, cb)
{
    var self = this;
    var fHitCount = 0;
    for(var i = 0; i < 3; i++)
    {
        if(drawNum[i] == num)
        {
            fHitCount++;
        }
    }
    var isBlueHit = false;
    if(drawNum[3] == num)
    {
        isBlueHit = true;
    }
    var level = -1;
    if(fHitCount == 0 && isBlueHit)
    {
        level = 5;
    }
    else if(fHitCount == 1) //4等奖
    {
        level = 4;
    }
    else if(fHitCount == 2)
    {
        level = 3;
    }
    else if(fHitCount == 3 && !isBlueHit)
    {
        level = 2;
    }
    else if(fHitCount == 3 && isBlueHit) {
        level = 1;
    }
    cb({level:level, count:1});
};

Check.prototype.getDrawNum = function()
{
    var self = this;
    var array = [];
    array.push(Math.floor(Math.random()*600)%6 + 1);
    array.push(Math.floor(Math.random()*600)%6 + 1);
    array.push(Math.floor(Math.random()*600)%6 + 1);
    array.push(Math.floor(Math.random()*600)%6 + 1);
    return array;
};

module.exports = new Check();