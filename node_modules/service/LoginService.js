var async = require('async');

var cons = require('cons');
var keyType = cons.keyFromType;
var customerType = cons.customerType;

var esut = require('easy_util');
var digestUtil = esut.digestUtil;
var log = esut.log;
var dateUtil = esut.dateUtil;

var config = require('config');
var ec = config.ec;
var prop = config.prop;

var dc = require('db').dc;

var Service = function(){};

Service.prototype.pageCheck = function(head, cb)
{
    var self = this;
    var keyFromType = keyType['CACHE'];
    var role = head.role;
    if(role == undefined)   //如果接口未定义所限定的角色，则使用认为是普通用户
    {
        role = customerType.NORMAL.id;
    }
    var config = {keyFromType:keyFromType, role:role};
    self.getKey(head, config, function(err, key){
        if(err)
        {
            cb(err);
        }
        else
        {
            if(head.key == key)
            {
                cb(null);
            }
            else
            {
                cb(ec[1007]);
            }
        }
    })
}

/**
 * 根据参数校验用户是否登录
 * @param head 消息头
 * @param bodyStr 消息体字符串
 * @param keyFromType 密钥来源
 * @param cb
 */
Service.prototype.check = function(head, bodyStr, config, cb)
{
    var self = this;
    async.waterfall([
        function(cb)    //第一步，获得密钥
        {
            self.getKey(head, config, function(err, key){
                if(err)
                {
                    console.log("获得密钥出错.");
                    console.log(err);
                }
                else
                {
                    console.log("获得密钥成功.");
                    console.log(key);
                }
                cb(err, key);
            });
        },
        function(key, cb)   //解密消息体
        {
            var decodedBodyStr = digestUtil.check(head, key, bodyStr);
            if(decodedBodyStr == null)  //解密失败
            {
                cb(ec[1004], null);
            }
            else
            {
                var err = null;
                var bodyNode = null;
                try
                {
                    bodyNode = JSON.parse(decodedBodyStr);
                    head.key = key;
                }
                catch (error)
                {
                    err = ec[1006];
                }
                finally
                {
                    cb(err, bodyNode);
                }
            }
        }
    ], function (err, bodyNode) {
        cb(err, bodyNode);
    });
}

/**
 * 获得密钥
 * @param head
 * @param keyFromType
 * @param cb
 */
Service.prototype.getKey = function(head, config, cb)
{
    if(config.keyFromType == keyType['NONE'])
    {
        cb(null, digestUtil.getEmptyKey());
    }
    else if(config.keyFromType == keyType['DB'])
    {
        var table = dc.pg.get("customer");
        var cond = {
            username:head.userId, type:customerType[head.userType].id
        }
        table.find(cond, {}, function(err, data){
            log.info(data);
            if(data && data.affected > 0)
            {
                var set = data.rst[0];
                head.userId = set.id + '';
                cb(null, digestUtil.md5(set.password));
            }
            else
            {
                cb(ec[1006]);
            }
        });
    }
    else if(config.keyFromType == keyType['CACHE'])
    {
        var stInfoTable = dc.pg.get("st_info");
        var userId = parseInt(head.userId);
        stInfoTable.find({id: userId}, {}, function (err, data) {
            console.log("page stInfo:")
            console.log(data);
            if(data && data.affected > 0)   //找到了对应的记录
            {
                var set = data.rst[0];
                if(set.role == config.role) //角色必须一致
                {
                    var now = new Date().getTime();
                    //登录超时
                    if (now - dateUtil.toDate(set.last_active_time).getTime() > prop.loginExpiredSeconds * 1000)
                    {
                        cb(ec[1007]);
                    }
                    else    //更新最后激活时间
                    {
                        stInfoTable.update({id: userId}, {$set:{last_active_time: dateUtil.toString(now)}}, function (err, updata) {
                            cb(null, set.st);
                        });
                    }
                }
                else
                {
                    console.log("角色不一致.........");
                    cb(ec[1007]);
                }
            }
            else
            {
                cb(ec[1007]);
            }
        });
    }
    else
    {
        cb(ec[1005], null);
    }
}

module.exports = new Service();