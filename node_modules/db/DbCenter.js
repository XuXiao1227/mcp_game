var async = require('async');

var config = require('config');
var prop = config.prop;

var esut = require('easy_util');
var log = esut.log;

var pgsql = require('pgsql');
var DataBase = pgsql.DataBase;
var Table = pgsql.Table;
var Column = pgsql.Column;

var cons = require('cons');
var customerType = cons.customerType;

var DbCenter = function(){
    var self = this;
};

DbCenter.prototype.init = function(cb)
{
    var self = this;
    async.waterfall([
        function(cb){
            self._initPg(function(err, data){
                cb(err, data);
            });
        }
    ], function (err, result) {
        console.log(result);
        cb(err);
    });
};

/**
 * 初始化数据库
 * @param cb
 * @private
 */
DbCenter.prototype._initPg = function(cb)
{
    var self = this;
    var db = new DataBase(prop.pg);
    var testTable = new Table("test",
        [
            new Column("id", "SERIAL", -1, "primary key"),
            new Column("index", "SERIAL", -1, ""),
            new Column("name", "text", -1, ""),
            new Column("description", "text", -1, "")
        ]
    );
    testTable.colList['description'].escape = true; //需要对文本进行转义
    db.put(testTable);
    //用户表
    var customer = new Table("customer", [
        new Column("id", "BIGSERIAL", -1, "primary key"),   //id
        new Column("username", "varchar", 40, "not null"),  //用户名
        new Column("nickname", "varchar", 40, "not null default ''"),  //昵称
        new Column("password", "varchar", 40, "not null"),  //密码
        new Column("reg_time", "timestamp", -1, "default now()"),  //注册时间
        new Column("type", "integer", -1, "default " + customerType.NORMAL.id),  //类型
        new Column("status", "integer", -1, "default 1"), //用户状态
        new Column("client_type", "integer", -1, "default 0"),  //客户端类型
        new Column("channel", "integer", -1, "default 0"),  //注册渠道
        new Column("reg_type", "integer", -1, "default 0"),  //注册类型，游客、ＱＱ、徽信等
        new Column("avatar_id", "bigint", -1, "default -1"), //image id
        new Column("experience", "bigint", -1, "default 0"), //经验值
        new Column("gold", "bigint", -1, "default 0"), //金币
        new Column("login_days", "integer", -1, "default 0"), //successive login count
        new Column("acc_reward", "bigint", -1, "default 0") //accumulated reward
    ]);
    db.put(customer);
    console.log(customer.getDdl());

    //customer status checking
    var stInfoTable = new Table("st_info", [
        new Column("id", "bigint", -1, "primary key"),
        new Column("st", "varchar", 32, ""),
        new Column("fix_st", "varchar", 32, ""),
        new Column("role", "integer", -1, ""),  //用户角色
        new Column("last_active_device", "varchar", 80, ""),    //最后登录设备
        new Column("last_active_time", "timestamp", -1, "")
    ]);
    db.put(stInfoTable);
    console.log(stInfoTable.getDdl());


    var customerFileTable = new Table("customer_file", [
        new Column("id", "BIGSERIAL", -1, "primary key"),    //id
        new Column("name", "varchar", 80, ""),    //文件名称
        new Column("type", "integer", -1, ""),    //文件名称
        new Column("size", "bigint", -1, ""),    //文件大小
        new Column("customer_id", "bigint", -1, ""),   //用户id
        new Column("create_time", "timestamp", -1, "default now()")    //创建时间
    ]);
    testTable.colList['name'].escape = true; //需要对文本进行转义
    db.put(customerFileTable);
    console.log(customerFileTable.getDdl());
    var fileBlockTable = new Table("file_block", [
        new Column("id", "BIGSERIAL", -1, "primary key"),    //id
        new Column("index", "bigint", -1, ""),    //块序号
        new Column("start", "bigint", -1, ""),    //开始点
        new Column("size", "bigint", -1, ""),    //块大小
        new Column("customer_id", "bigint", -1, ""),   //用户id
        new Column("file_id", "bigint", -1, ""),   //用户id
        new Column("content", "text", -1, ""),   //文件内容
        new Column("create_time", "timestamp", -1, "")    //创建时间
    ]);
    db.put(fileBlockTable);
    console.log(fileBlockTable.getDdl());

    //游戏表
    var gameTable = new Table("game", [
        new Column("id", "BIGSERIAL", -1, "primary key"),    //id
        new Column("code", "varchar", 80, "not null"),    //标志
        new Column("name", "varchar", 80, "not null"),    //名称
        new Column("status", "integer", -1, "default 1"),    //状态
        new Column("create_time", "timestamp", -1, "")    //创建时间
    ]);
    db.put(gameTable);
    console.log(gameTable.getDdl());

    //奖级表
    var gameLevelTable = new Table("game_level", [
        new Column("id", "BIGSERIAL", -1, "primary key"),    //id
        new Column("game_code", "varchar", 80, "not null"),   //游戏code G01=动物猜猜乐 G02=猜宝机
        new Column("code", "varchar", 80, ""),    //奖级代号
        new Column("name", "varchar", 80, ""),    //奖级名称
        new Column("hit_amount", "bigint", -1, ""),   //中奖基本金额
        new Column("create_time", "timestamp", -1, ""),    //创建时间
        new Column("hit_rule", "varchar", 400, "")    //描述
    ]);
    gameLevelTable.colList['hit_rule'].escape = true; //需要对文本进行转义
    db.put(gameLevelTable);
    console.log(gameLevelTable.getDdl());

    //票据表
    var ticketTable = new Table("ticket", [
        new Column("id", "BIGSERIAL", -1, "primary key"),    //id
        new Column("customer_id", "bigint", -1, "not null"),   //用户id
        new Column("game_code", "varchar", 80, "not null"),    //游戏代码
        new Column("multiple", "integer", -1, ""),   //倍数
        new Column("amount", "bigint", -1, ""),   //金额
        new Column("number", "text", -1, "not null"),   //号码
        new Column("draw_number", "text", -1, "not null"),   //开奖号码
        new Column("draw_info", "text", -1, "not null"),   //中奖详情
        new Column("hit_amount", "bigint", -1, ""),   //中奖金额
        new Column("seq_id", "varchar", 80, ""),   //唯一标志
        new Column("create_time", "timestamp", -1, "not null default now()")    //创建时间
    ]);

    db.put(ticketTable);
    console.log(ticketTable.getDdl());
    //金币流水表
    var goldLogTable = new Table("gold_log", [
        new Column("id", "BIGSERIAL", -1, "primary key"),    //id
        new Column("before", "bigint", -1, "default -1"),   //操作后
        new Column("after", "bigint", -1, "default -1"),   //操作前
        new Column("amount", "bigint", -1, "default 0"),   //操作金额
        new Column("subject_id", "bigint", -1, "default 0"),   //科目
        new Column("remark", "varchar", 80, ""),   //描述
        new Column("order_id", "varchar", 80, ""),   //唯一的订单号
        new Column("customer_id", "bigint", -1, ""),   //用户id
        new Column("status", "integer", -1, "default 300"),   //用户id
        new Column("create_time", "timestamp", -1, "not null default now()")    //创建时间
    ]);
    db.put(goldLogTable);
    console.log(goldLogTable.getDdl());

    //商品表
    var goodsTable = new Table("goods", [
        new Column("id", "BIGSERIAL", -1, "primary key"),    //id
        new Column("name", "varchar", 40, "not null"),   //名称
        new Column("num", "bigint", -1, "default -1"),   //数量
        new Column("file_id", "bigint", -1, ""),   //图片id
        new Column("amount", "bigint", -1, "default 0"),   //金额
        new Column("remark", "varchar", 80, ""),   //描述
        new Column("status", "integer", -1, "default 1"),   //用户id
        new Column("create_time", "timestamp", -1, "not null default now()")    //创建时间
    ]);
    goodsTable.colList['remark'].escape = true; //需要对文本进行转义
    db.put(goodsTable);
    console.log(goodsTable.getDdl());

    //gold pool
    var goldPoolTable = new Table("goldPool",[
        new Column("id", "SERIAL", -1, "primary key"), //unique id <p.k.>
        new Column("gold", "bigint", -1, "not null default 1000000"), //accumulated gold pool
        new Column("date", "timestamp", -1, "default now()") //date updated
    ]);
    db.put(goldPoolTable);
    console.log(goldPoolTable.getDdl());

    //task
    var taskTable = new Table("task",[
        new Column("id", "SERIAL", -1, "primary key"), //unique id <p.k.>
        new Column("name", "varchar", 60, "not null default ''"), //task name or title
        new Column("img_id", "bigint", -1, ""), //the id of the image attached to the task
        new Column("description", "varchar", 150, "default ''"), //description of the task
        new Column("start_time", "date", -1, "not null default current_date"), //when the task will start
        new Column("end_time", "date", -1, ""), //when the task will end
        new Column("create_time", "timestamp", -1, "default now()"),  //when the task is created
        new Column("status", "integer", -1, "not null default 0"),  //the current state of the task: 0-offline, 1-online, 2-expired
        new Column("reward_exp", "integer", -1, "default 0"),  //experience reward of the task
        new Column("reward_gold", "integer", -1, "default 0"),  //gold reward of the task
        new Column("type", "integer", -1, "not null default 0")  //the type of the task: 0-repeatable, 1-unrepeatable&in-game, 2-unrepeatable&outsource
    ]);
    taskTable.colList['description'].escape = true;  //text transform
    db.put(taskTable);
    console.log(taskTable.getDdl());

    var taskLogTable = new Table("task_log", [
        new Column("id", "BIGSERIAL", -1, "primary key"),  //unique id <p.k.>
        new Column("user_id", "bigint", -1, "not null default -1"), //id in the customer table
        new Column("task_id", "integer", -1, "not null default -1"),  //id in the task table
        new Column("comp_time", "timestamp", -1, "default now()") //when was the task completed
    ]);
    db.put(taskLogTable);
    console.log(taskLogTable.getDdl());

    self.pg = db;
    self.pg.init(cb);
};

module.exports = new DbCenter();

