var async = require('async');

var inter = require("inter");

var config = require("config");
var ec = config.ec;

var service = require('service');
var logService = service.loginService;

var cons = require('cons');
var customerType = cons.customerType;

var CmdFactory = function(){
    var self = this;
    var data = {};
    data['U'] = inter.user;
    data['UP'] = inter.upload;
    data['AD'] = inter.admin;
    data['BK'] = inter.book;
    data['BT'] = inter.bet;
    self.data = data;
};

CmdFactory.prototype.handle = function(headNode, bodyStr, cb)
{
    var self = this;
    var checkErr = null;
    //校验消息头和消息体是否存在
    if(headNode == null || headNode == undefined)
    {
        checkErr = ec[1002];
    }
    else
    {
        if(typeof headNode.cmd != 'string' || typeof headNode.digestType != 'string'
            || typeof headNode.userId != 'string' || typeof headNode.userType != 'string')
        {
            checkErr = ec[1002];
        }
        else
        {
            if(customerType[headNode.userType] == undefined)
            {
                checkErr = ec[1002];
            }
        }
    }
    if(!checkErr && typeof bodyStr != 'string')   //消息头字段正确，校验消息体
    {
        checkErr = ec[1003];
    }
    if(checkErr)
    {
        headNode.digestType = '3des';
        cb(checkErr, {});
        return;
    }
    var cmdGroup = headNode.cmd.match(/^([A-Z]+)([0-9]{1,})$/);
    var curInter = self.data[cmdGroup[1]];
    var uuid = null;
    async.waterfall([
        function(cb)
        {
            if(curInter == undefined)   //类型存在
            {
                cb(ec[1001]);
            }
            else
            {
                cb(null);
            }
        },
        function(cb)    //所属类型的具体接口也存在
        {
            var cmd = curInter.cmd[headNode.cmd];
            if(cmd == undefined)
            {
                cb(ec[1001]);
            }
            else
            {
                cb(null, cmd);
            }
        },
        function(cmd, cb)   //登录判断
        {
            var keyFromType = cmd.fromType;
            var role = cmd.role;
            if(role == undefined)   //如果接口未定义所限定的角色，则使用认为是普通用户
            {
                role = customerType.NORMAL.id;
            }
            var config = {keyFromType:keyFromType, role:role};
            logService.check(headNode, bodyStr, config, function(err, body){
                if(headNode.cmd != "UP02") {
                    console.log("decode body:");
                    console.log(body);
                }
                if(!err)
                {
                    uuid = body.uuid;
                }
                cb(err, body);
            });
        },
        function(body, cb)  //校验接口数据
        {
            var method = "check" + headNode.cmd;
            if(curInter[method])
            {
                curInter[method](headNode, body, function(err, data){
                    cb(err, body);
                });
            }
            else
            {
                cb(ec[1001]);
            }
        },
        function(body, cb)  //处理业务逻辑
        {
            var method = "handle" + headNode.cmd;
            if(curInter[method])
            {
                curInter[method](headNode, body, function(err, backBodyNode){
                    cb(err, backBodyNode);
                });
            }
            else
            {
                cb(ec[1001]);
            }
        }
    ], function (err, backBodyNode) {
        if(backBodyNode == null || backBodyNode == undefined)
        {
            backBodyNode = {};
        }
        backBodyNode.uuid = uuid;   //设置消息的唯一id
        cb(err, backBodyNode);
    });
};

var cmdFactory = new CmdFactory();
module.exports = cmdFactory;