var Readable = require('stream').Readable;
var util = require('util');
var dc = require('db').dc;
var DbFile = require('./DbFile.js');

var Events = require("events");

util.inherits(MgFileStream, Readable);

function MgFileStream(opt) {
    Readable.call(this, opt);
    var self = this;
    self.fileId = opt.fileId;

    self.ee = new Events.EventEmitter();    //事件处理
    self.ee.setMaxListeners(0); //不限制最高cmd数目
    self.endCount = 0;

    self.ee.on("end", function(){
        console.log("end 1.....");
        //self.read(0);
        self.push(null);
        console.log("end 2.....");
        if(self.endCount < 1)
        {
            self._read(0);
            console.log("end 3.....");
            self.endCount++;
        }
    });

    self._source = new DbFile(self.fileId);

    // Every time there's data, we push it into the internal buffer.
    self._source.on_data = function(chunk) {
        // if push() returns false, then we need to stop reading from source
        console.log("data.............");
        self.push(chunk);
    };

    // When the source ends, we push the EOF-signaling `null` chunk
    self._source.on_end = function() {
        self.ee.emit("end");
    };
};

MgFileStream.prototype._read = function() {
    var self = this;
    console.log("read...........");
    self._source.readStart();
};

module.exports = MgFileStream;